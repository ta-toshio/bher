// Code generated by entc, DO NOT EDIT.

package chart

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ta-toshio/bherb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Patch applies equality check predicate on the "patch" field. It's identical to PatchEQ.
func Patch(v bool) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatch), v))
	})
}

// Generation applies equality check predicate on the "generation" field. It's identical to GenerationEQ.
func Generation(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGeneration), v))
	})
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// Allergy applies equality check predicate on the "allergy" field. It's identical to AllergyEQ.
func Allergy(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllergy), v))
	})
}

// Rash applies equality check predicate on the "rash" field. It's identical to RashEQ.
func Rash(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRash), v))
	})
}

// Sting applies equality check predicate on the "sting" field. It's identical to StingEQ.
func Sting(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSting), v))
	})
}

// DyeWhen applies equality check predicate on the "dye_when" field. It's identical to DyeWhenEQ.
func DyeWhen(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDyeWhen), v))
	})
}

// DyeWhere applies equality check predicate on the "dye_where" field. It's identical to DyeWhereEQ.
func DyeWhere(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDyeWhere), v))
	})
}

// HenaWhen applies equality check predicate on the "hena_when" field. It's identical to HenaWhenEQ.
func HenaWhen(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHenaWhen), v))
	})
}

// RebondedWhen applies equality check predicate on the "rebonded_when" field. It's identical to RebondedWhenEQ.
func RebondedWhen(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRebondedWhen), v))
	})
}

// ManicureWhen applies equality check predicate on the "manicure_when" field. It's identical to ManicureWhenEQ.
func ManicureWhen(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManicureWhen), v))
	})
}

// PermWhen applies equality check predicate on the "perm_when" field. It's identical to PermWhenEQ.
func PermWhen(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPermWhen), v))
	})
}

// TreatmentWhen applies equality check predicate on the "treatment_when" field. It's identical to TreatmentWhenEQ.
func TreatmentWhen(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreatmentWhen), v))
	})
}

// NoticeReason applies equality check predicate on the "notice_reason" field. It's identical to NoticeReasonEQ.
func NoticeReason(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeReason), v))
	})
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// LastNameHiragana applies equality check predicate on the "last_name_hiragana" field. It's identical to LastNameHiraganaEQ.
func LastNameHiragana(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastNameHiragana), v))
	})
}

// FirstNameHiragana applies equality check predicate on the "first_name_hiragana" field. It's identical to FirstNameHiraganaEQ.
func FirstNameHiragana(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstNameHiragana), v))
	})
}

// PostalCode applies equality check predicate on the "postal_code" field. It's identical to PostalCodeEQ.
func PostalCode(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostalCode), v))
	})
}

// PrefectureID applies equality check predicate on the "prefecture_id" field. It's identical to PrefectureIDEQ.
func PrefectureID(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrefectureID), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// Tel applies equality check predicate on the "tel" field. It's identical to TelEQ.
func Tel(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTel), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// PatchEQ applies the EQ predicate on the "patch" field.
func PatchEQ(v bool) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPatch), v))
	})
}

// PatchNEQ applies the NEQ predicate on the "patch" field.
func PatchNEQ(v bool) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPatch), v))
	})
}

// GenerationEQ applies the EQ predicate on the "generation" field.
func GenerationEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGeneration), v))
	})
}

// GenerationNEQ applies the NEQ predicate on the "generation" field.
func GenerationNEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGeneration), v))
	})
}

// GenerationIn applies the In predicate on the "generation" field.
func GenerationIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGeneration), v...))
	})
}

// GenerationNotIn applies the NotIn predicate on the "generation" field.
func GenerationNotIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGeneration), v...))
	})
}

// GenerationGT applies the GT predicate on the "generation" field.
func GenerationGT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGeneration), v))
	})
}

// GenerationGTE applies the GTE predicate on the "generation" field.
func GenerationGTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGeneration), v))
	})
}

// GenerationLT applies the LT predicate on the "generation" field.
func GenerationLT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGeneration), v))
	})
}

// GenerationLTE applies the LTE predicate on the "generation" field.
func GenerationLTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGeneration), v))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGender), v))
	})
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGender), v))
	})
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGender), v))
	})
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGender), v))
	})
}

// AllergyEQ applies the EQ predicate on the "allergy" field.
func AllergyEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllergy), v))
	})
}

// AllergyNEQ applies the NEQ predicate on the "allergy" field.
func AllergyNEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllergy), v))
	})
}

// AllergyIn applies the In predicate on the "allergy" field.
func AllergyIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllergy), v...))
	})
}

// AllergyNotIn applies the NotIn predicate on the "allergy" field.
func AllergyNotIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllergy), v...))
	})
}

// AllergyGT applies the GT predicate on the "allergy" field.
func AllergyGT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAllergy), v))
	})
}

// AllergyGTE applies the GTE predicate on the "allergy" field.
func AllergyGTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAllergy), v))
	})
}

// AllergyLT applies the LT predicate on the "allergy" field.
func AllergyLT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAllergy), v))
	})
}

// AllergyLTE applies the LTE predicate on the "allergy" field.
func AllergyLTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAllergy), v))
	})
}

// RashEQ applies the EQ predicate on the "rash" field.
func RashEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRash), v))
	})
}

// RashNEQ applies the NEQ predicate on the "rash" field.
func RashNEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRash), v))
	})
}

// RashIn applies the In predicate on the "rash" field.
func RashIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRash), v...))
	})
}

// RashNotIn applies the NotIn predicate on the "rash" field.
func RashNotIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRash), v...))
	})
}

// RashGT applies the GT predicate on the "rash" field.
func RashGT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRash), v))
	})
}

// RashGTE applies the GTE predicate on the "rash" field.
func RashGTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRash), v))
	})
}

// RashLT applies the LT predicate on the "rash" field.
func RashLT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRash), v))
	})
}

// RashLTE applies the LTE predicate on the "rash" field.
func RashLTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRash), v))
	})
}

// StingEQ applies the EQ predicate on the "sting" field.
func StingEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSting), v))
	})
}

// StingNEQ applies the NEQ predicate on the "sting" field.
func StingNEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSting), v))
	})
}

// StingIn applies the In predicate on the "sting" field.
func StingIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSting), v...))
	})
}

// StingNotIn applies the NotIn predicate on the "sting" field.
func StingNotIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSting), v...))
	})
}

// StingGT applies the GT predicate on the "sting" field.
func StingGT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSting), v))
	})
}

// StingGTE applies the GTE predicate on the "sting" field.
func StingGTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSting), v))
	})
}

// StingLT applies the LT predicate on the "sting" field.
func StingLT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSting), v))
	})
}

// StingLTE applies the LTE predicate on the "sting" field.
func StingLTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSting), v))
	})
}

// DyeWhenEQ applies the EQ predicate on the "dye_when" field.
func DyeWhenEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDyeWhen), v))
	})
}

// DyeWhenNEQ applies the NEQ predicate on the "dye_when" field.
func DyeWhenNEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDyeWhen), v))
	})
}

// DyeWhenIn applies the In predicate on the "dye_when" field.
func DyeWhenIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDyeWhen), v...))
	})
}

// DyeWhenNotIn applies the NotIn predicate on the "dye_when" field.
func DyeWhenNotIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDyeWhen), v...))
	})
}

// DyeWhenGT applies the GT predicate on the "dye_when" field.
func DyeWhenGT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDyeWhen), v))
	})
}

// DyeWhenGTE applies the GTE predicate on the "dye_when" field.
func DyeWhenGTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDyeWhen), v))
	})
}

// DyeWhenLT applies the LT predicate on the "dye_when" field.
func DyeWhenLT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDyeWhen), v))
	})
}

// DyeWhenLTE applies the LTE predicate on the "dye_when" field.
func DyeWhenLTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDyeWhen), v))
	})
}

// DyeWhereEQ applies the EQ predicate on the "dye_where" field.
func DyeWhereEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDyeWhere), v))
	})
}

// DyeWhereNEQ applies the NEQ predicate on the "dye_where" field.
func DyeWhereNEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDyeWhere), v))
	})
}

// DyeWhereIn applies the In predicate on the "dye_where" field.
func DyeWhereIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDyeWhere), v...))
	})
}

// DyeWhereNotIn applies the NotIn predicate on the "dye_where" field.
func DyeWhereNotIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDyeWhere), v...))
	})
}

// DyeWhereGT applies the GT predicate on the "dye_where" field.
func DyeWhereGT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDyeWhere), v))
	})
}

// DyeWhereGTE applies the GTE predicate on the "dye_where" field.
func DyeWhereGTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDyeWhere), v))
	})
}

// DyeWhereLT applies the LT predicate on the "dye_where" field.
func DyeWhereLT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDyeWhere), v))
	})
}

// DyeWhereLTE applies the LTE predicate on the "dye_where" field.
func DyeWhereLTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDyeWhere), v))
	})
}

// HenaWhenEQ applies the EQ predicate on the "hena_when" field.
func HenaWhenEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHenaWhen), v))
	})
}

// HenaWhenNEQ applies the NEQ predicate on the "hena_when" field.
func HenaWhenNEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHenaWhen), v))
	})
}

// HenaWhenIn applies the In predicate on the "hena_when" field.
func HenaWhenIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHenaWhen), v...))
	})
}

// HenaWhenNotIn applies the NotIn predicate on the "hena_when" field.
func HenaWhenNotIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHenaWhen), v...))
	})
}

// HenaWhenGT applies the GT predicate on the "hena_when" field.
func HenaWhenGT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHenaWhen), v))
	})
}

// HenaWhenGTE applies the GTE predicate on the "hena_when" field.
func HenaWhenGTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHenaWhen), v))
	})
}

// HenaWhenLT applies the LT predicate on the "hena_when" field.
func HenaWhenLT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHenaWhen), v))
	})
}

// HenaWhenLTE applies the LTE predicate on the "hena_when" field.
func HenaWhenLTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHenaWhen), v))
	})
}

// RebondedWhenEQ applies the EQ predicate on the "rebonded_when" field.
func RebondedWhenEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRebondedWhen), v))
	})
}

// RebondedWhenNEQ applies the NEQ predicate on the "rebonded_when" field.
func RebondedWhenNEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRebondedWhen), v))
	})
}

// RebondedWhenIn applies the In predicate on the "rebonded_when" field.
func RebondedWhenIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRebondedWhen), v...))
	})
}

// RebondedWhenNotIn applies the NotIn predicate on the "rebonded_when" field.
func RebondedWhenNotIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRebondedWhen), v...))
	})
}

// RebondedWhenGT applies the GT predicate on the "rebonded_when" field.
func RebondedWhenGT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRebondedWhen), v))
	})
}

// RebondedWhenGTE applies the GTE predicate on the "rebonded_when" field.
func RebondedWhenGTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRebondedWhen), v))
	})
}

// RebondedWhenLT applies the LT predicate on the "rebonded_when" field.
func RebondedWhenLT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRebondedWhen), v))
	})
}

// RebondedWhenLTE applies the LTE predicate on the "rebonded_when" field.
func RebondedWhenLTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRebondedWhen), v))
	})
}

// ManicureWhenEQ applies the EQ predicate on the "manicure_when" field.
func ManicureWhenEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManicureWhen), v))
	})
}

// ManicureWhenNEQ applies the NEQ predicate on the "manicure_when" field.
func ManicureWhenNEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldManicureWhen), v))
	})
}

// ManicureWhenIn applies the In predicate on the "manicure_when" field.
func ManicureWhenIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldManicureWhen), v...))
	})
}

// ManicureWhenNotIn applies the NotIn predicate on the "manicure_when" field.
func ManicureWhenNotIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldManicureWhen), v...))
	})
}

// ManicureWhenGT applies the GT predicate on the "manicure_when" field.
func ManicureWhenGT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldManicureWhen), v))
	})
}

// ManicureWhenGTE applies the GTE predicate on the "manicure_when" field.
func ManicureWhenGTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldManicureWhen), v))
	})
}

// ManicureWhenLT applies the LT predicate on the "manicure_when" field.
func ManicureWhenLT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldManicureWhen), v))
	})
}

// ManicureWhenLTE applies the LTE predicate on the "manicure_when" field.
func ManicureWhenLTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldManicureWhen), v))
	})
}

// PermWhenEQ applies the EQ predicate on the "perm_when" field.
func PermWhenEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPermWhen), v))
	})
}

// PermWhenNEQ applies the NEQ predicate on the "perm_when" field.
func PermWhenNEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPermWhen), v))
	})
}

// PermWhenIn applies the In predicate on the "perm_when" field.
func PermWhenIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPermWhen), v...))
	})
}

// PermWhenNotIn applies the NotIn predicate on the "perm_when" field.
func PermWhenNotIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPermWhen), v...))
	})
}

// PermWhenGT applies the GT predicate on the "perm_when" field.
func PermWhenGT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPermWhen), v))
	})
}

// PermWhenGTE applies the GTE predicate on the "perm_when" field.
func PermWhenGTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPermWhen), v))
	})
}

// PermWhenLT applies the LT predicate on the "perm_when" field.
func PermWhenLT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPermWhen), v))
	})
}

// PermWhenLTE applies the LTE predicate on the "perm_when" field.
func PermWhenLTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPermWhen), v))
	})
}

// TreatmentWhenEQ applies the EQ predicate on the "treatment_when" field.
func TreatmentWhenEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreatmentWhen), v))
	})
}

// TreatmentWhenNEQ applies the NEQ predicate on the "treatment_when" field.
func TreatmentWhenNEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreatmentWhen), v))
	})
}

// TreatmentWhenIn applies the In predicate on the "treatment_when" field.
func TreatmentWhenIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreatmentWhen), v...))
	})
}

// TreatmentWhenNotIn applies the NotIn predicate on the "treatment_when" field.
func TreatmentWhenNotIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreatmentWhen), v...))
	})
}

// TreatmentWhenGT applies the GT predicate on the "treatment_when" field.
func TreatmentWhenGT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreatmentWhen), v))
	})
}

// TreatmentWhenGTE applies the GTE predicate on the "treatment_when" field.
func TreatmentWhenGTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreatmentWhen), v))
	})
}

// TreatmentWhenLT applies the LT predicate on the "treatment_when" field.
func TreatmentWhenLT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreatmentWhen), v))
	})
}

// TreatmentWhenLTE applies the LTE predicate on the "treatment_when" field.
func TreatmentWhenLTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreatmentWhen), v))
	})
}

// NoticeReasonEQ applies the EQ predicate on the "notice_reason" field.
func NoticeReasonEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNoticeReason), v))
	})
}

// NoticeReasonNEQ applies the NEQ predicate on the "notice_reason" field.
func NoticeReasonNEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNoticeReason), v))
	})
}

// NoticeReasonIn applies the In predicate on the "notice_reason" field.
func NoticeReasonIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNoticeReason), v...))
	})
}

// NoticeReasonNotIn applies the NotIn predicate on the "notice_reason" field.
func NoticeReasonNotIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNoticeReason), v...))
	})
}

// NoticeReasonGT applies the GT predicate on the "notice_reason" field.
func NoticeReasonGT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNoticeReason), v))
	})
}

// NoticeReasonGTE applies the GTE predicate on the "notice_reason" field.
func NoticeReasonGTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNoticeReason), v))
	})
}

// NoticeReasonLT applies the LT predicate on the "notice_reason" field.
func NoticeReasonLT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNoticeReason), v))
	})
}

// NoticeReasonLTE applies the LTE predicate on the "notice_reason" field.
func NoticeReasonLTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNoticeReason), v))
	})
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastName), v))
	})
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastName), v...))
	})
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastName), v...))
	})
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastName), v))
	})
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastName), v))
	})
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastName), v))
	})
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastName), v))
	})
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastName), v))
	})
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastName), v))
	})
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastName), v))
	})
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastName), v))
	})
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastName), v))
	})
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstName), v))
	})
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstName), v...))
	})
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstName), v...))
	})
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstName), v))
	})
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstName), v))
	})
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstName), v))
	})
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstName), v))
	})
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstName), v))
	})
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstName), v))
	})
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstName), v))
	})
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstName), v))
	})
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstName), v))
	})
}

// LastNameHiraganaEQ applies the EQ predicate on the "last_name_hiragana" field.
func LastNameHiraganaEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastNameHiragana), v))
	})
}

// LastNameHiraganaNEQ applies the NEQ predicate on the "last_name_hiragana" field.
func LastNameHiraganaNEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastNameHiragana), v))
	})
}

// LastNameHiraganaIn applies the In predicate on the "last_name_hiragana" field.
func LastNameHiraganaIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastNameHiragana), v...))
	})
}

// LastNameHiraganaNotIn applies the NotIn predicate on the "last_name_hiragana" field.
func LastNameHiraganaNotIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastNameHiragana), v...))
	})
}

// LastNameHiraganaGT applies the GT predicate on the "last_name_hiragana" field.
func LastNameHiraganaGT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastNameHiragana), v))
	})
}

// LastNameHiraganaGTE applies the GTE predicate on the "last_name_hiragana" field.
func LastNameHiraganaGTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastNameHiragana), v))
	})
}

// LastNameHiraganaLT applies the LT predicate on the "last_name_hiragana" field.
func LastNameHiraganaLT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastNameHiragana), v))
	})
}

// LastNameHiraganaLTE applies the LTE predicate on the "last_name_hiragana" field.
func LastNameHiraganaLTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastNameHiragana), v))
	})
}

// LastNameHiraganaContains applies the Contains predicate on the "last_name_hiragana" field.
func LastNameHiraganaContains(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastNameHiragana), v))
	})
}

// LastNameHiraganaHasPrefix applies the HasPrefix predicate on the "last_name_hiragana" field.
func LastNameHiraganaHasPrefix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastNameHiragana), v))
	})
}

// LastNameHiraganaHasSuffix applies the HasSuffix predicate on the "last_name_hiragana" field.
func LastNameHiraganaHasSuffix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastNameHiragana), v))
	})
}

// LastNameHiraganaEqualFold applies the EqualFold predicate on the "last_name_hiragana" field.
func LastNameHiraganaEqualFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastNameHiragana), v))
	})
}

// LastNameHiraganaContainsFold applies the ContainsFold predicate on the "last_name_hiragana" field.
func LastNameHiraganaContainsFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastNameHiragana), v))
	})
}

// FirstNameHiraganaEQ applies the EQ predicate on the "first_name_hiragana" field.
func FirstNameHiraganaEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstNameHiragana), v))
	})
}

// FirstNameHiraganaNEQ applies the NEQ predicate on the "first_name_hiragana" field.
func FirstNameHiraganaNEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstNameHiragana), v))
	})
}

// FirstNameHiraganaIn applies the In predicate on the "first_name_hiragana" field.
func FirstNameHiraganaIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstNameHiragana), v...))
	})
}

// FirstNameHiraganaNotIn applies the NotIn predicate on the "first_name_hiragana" field.
func FirstNameHiraganaNotIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstNameHiragana), v...))
	})
}

// FirstNameHiraganaGT applies the GT predicate on the "first_name_hiragana" field.
func FirstNameHiraganaGT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstNameHiragana), v))
	})
}

// FirstNameHiraganaGTE applies the GTE predicate on the "first_name_hiragana" field.
func FirstNameHiraganaGTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstNameHiragana), v))
	})
}

// FirstNameHiraganaLT applies the LT predicate on the "first_name_hiragana" field.
func FirstNameHiraganaLT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstNameHiragana), v))
	})
}

// FirstNameHiraganaLTE applies the LTE predicate on the "first_name_hiragana" field.
func FirstNameHiraganaLTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstNameHiragana), v))
	})
}

// FirstNameHiraganaContains applies the Contains predicate on the "first_name_hiragana" field.
func FirstNameHiraganaContains(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstNameHiragana), v))
	})
}

// FirstNameHiraganaHasPrefix applies the HasPrefix predicate on the "first_name_hiragana" field.
func FirstNameHiraganaHasPrefix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstNameHiragana), v))
	})
}

// FirstNameHiraganaHasSuffix applies the HasSuffix predicate on the "first_name_hiragana" field.
func FirstNameHiraganaHasSuffix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstNameHiragana), v))
	})
}

// FirstNameHiraganaEqualFold applies the EqualFold predicate on the "first_name_hiragana" field.
func FirstNameHiraganaEqualFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstNameHiragana), v))
	})
}

// FirstNameHiraganaContainsFold applies the ContainsFold predicate on the "first_name_hiragana" field.
func FirstNameHiraganaContainsFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstNameHiragana), v))
	})
}

// PostalCodeEQ applies the EQ predicate on the "postal_code" field.
func PostalCodeEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostalCode), v))
	})
}

// PostalCodeNEQ applies the NEQ predicate on the "postal_code" field.
func PostalCodeNEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPostalCode), v))
	})
}

// PostalCodeIn applies the In predicate on the "postal_code" field.
func PostalCodeIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPostalCode), v...))
	})
}

// PostalCodeNotIn applies the NotIn predicate on the "postal_code" field.
func PostalCodeNotIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPostalCode), v...))
	})
}

// PostalCodeGT applies the GT predicate on the "postal_code" field.
func PostalCodeGT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPostalCode), v))
	})
}

// PostalCodeGTE applies the GTE predicate on the "postal_code" field.
func PostalCodeGTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPostalCode), v))
	})
}

// PostalCodeLT applies the LT predicate on the "postal_code" field.
func PostalCodeLT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPostalCode), v))
	})
}

// PostalCodeLTE applies the LTE predicate on the "postal_code" field.
func PostalCodeLTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPostalCode), v))
	})
}

// PostalCodeContains applies the Contains predicate on the "postal_code" field.
func PostalCodeContains(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPostalCode), v))
	})
}

// PostalCodeHasPrefix applies the HasPrefix predicate on the "postal_code" field.
func PostalCodeHasPrefix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPostalCode), v))
	})
}

// PostalCodeHasSuffix applies the HasSuffix predicate on the "postal_code" field.
func PostalCodeHasSuffix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPostalCode), v))
	})
}

// PostalCodeEqualFold applies the EqualFold predicate on the "postal_code" field.
func PostalCodeEqualFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPostalCode), v))
	})
}

// PostalCodeContainsFold applies the ContainsFold predicate on the "postal_code" field.
func PostalCodeContainsFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPostalCode), v))
	})
}

// PrefectureIDEQ applies the EQ predicate on the "prefecture_id" field.
func PrefectureIDEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrefectureID), v))
	})
}

// PrefectureIDNEQ applies the NEQ predicate on the "prefecture_id" field.
func PrefectureIDNEQ(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrefectureID), v))
	})
}

// PrefectureIDIn applies the In predicate on the "prefecture_id" field.
func PrefectureIDIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrefectureID), v...))
	})
}

// PrefectureIDNotIn applies the NotIn predicate on the "prefecture_id" field.
func PrefectureIDNotIn(vs ...int) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrefectureID), v...))
	})
}

// PrefectureIDGT applies the GT predicate on the "prefecture_id" field.
func PrefectureIDGT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrefectureID), v))
	})
}

// PrefectureIDGTE applies the GTE predicate on the "prefecture_id" field.
func PrefectureIDGTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrefectureID), v))
	})
}

// PrefectureIDLT applies the LT predicate on the "prefecture_id" field.
func PrefectureIDLT(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrefectureID), v))
	})
}

// PrefectureIDLTE applies the LTE predicate on the "prefecture_id" field.
func PrefectureIDLTE(v int) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrefectureID), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// TelEQ applies the EQ predicate on the "tel" field.
func TelEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTel), v))
	})
}

// TelNEQ applies the NEQ predicate on the "tel" field.
func TelNEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTel), v))
	})
}

// TelIn applies the In predicate on the "tel" field.
func TelIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTel), v...))
	})
}

// TelNotIn applies the NotIn predicate on the "tel" field.
func TelNotIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTel), v...))
	})
}

// TelGT applies the GT predicate on the "tel" field.
func TelGT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTel), v))
	})
}

// TelGTE applies the GTE predicate on the "tel" field.
func TelGTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTel), v))
	})
}

// TelLT applies the LT predicate on the "tel" field.
func TelLT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTel), v))
	})
}

// TelLTE applies the LTE predicate on the "tel" field.
func TelLTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTel), v))
	})
}

// TelContains applies the Contains predicate on the "tel" field.
func TelContains(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTel), v))
	})
}

// TelHasPrefix applies the HasPrefix predicate on the "tel" field.
func TelHasPrefix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTel), v))
	})
}

// TelHasSuffix applies the HasSuffix predicate on the "tel" field.
func TelHasSuffix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTel), v))
	})
}

// TelEqualFold applies the EqualFold predicate on the "tel" field.
func TelEqualFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTel), v))
	})
}

// TelContainsFold applies the ContainsFold predicate on the "tel" field.
func TelContainsFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTel), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Chart {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chart(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chart) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chart) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chart) predicate.Chart {
	return predicate.Chart(func(s *sql.Selector) {
		p(s.Not())
	})
}
