// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ta-toshio/bherb/ent/chart"
)

// ChartCreate is the builder for creating a Chart entity.
type ChartCreate struct {
	config
	mutation *ChartMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (cc *ChartCreate) SetCreateTime(t time.Time) *ChartCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *ChartCreate) SetNillableCreateTime(t *time.Time) *ChartCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *ChartCreate) SetUpdateTime(t time.Time) *ChartCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *ChartCreate) SetNillableUpdateTime(t *time.Time) *ChartCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetPatch sets the "patch" field.
func (cc *ChartCreate) SetPatch(b bool) *ChartCreate {
	cc.mutation.SetPatch(b)
	return cc
}

// SetNillablePatch sets the "patch" field if the given value is not nil.
func (cc *ChartCreate) SetNillablePatch(b *bool) *ChartCreate {
	if b != nil {
		cc.SetPatch(*b)
	}
	return cc
}

// SetGeneration sets the "generation" field.
func (cc *ChartCreate) SetGeneration(i int) *ChartCreate {
	cc.mutation.SetGeneration(i)
	return cc
}

// SetNillableGeneration sets the "generation" field if the given value is not nil.
func (cc *ChartCreate) SetNillableGeneration(i *int) *ChartCreate {
	if i != nil {
		cc.SetGeneration(*i)
	}
	return cc
}

// SetGender sets the "gender" field.
func (cc *ChartCreate) SetGender(i int) *ChartCreate {
	cc.mutation.SetGender(i)
	return cc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (cc *ChartCreate) SetNillableGender(i *int) *ChartCreate {
	if i != nil {
		cc.SetGender(*i)
	}
	return cc
}

// SetAllergy sets the "allergy" field.
func (cc *ChartCreate) SetAllergy(i int) *ChartCreate {
	cc.mutation.SetAllergy(i)
	return cc
}

// SetNillableAllergy sets the "allergy" field if the given value is not nil.
func (cc *ChartCreate) SetNillableAllergy(i *int) *ChartCreate {
	if i != nil {
		cc.SetAllergy(*i)
	}
	return cc
}

// SetRash sets the "rash" field.
func (cc *ChartCreate) SetRash(i int) *ChartCreate {
	cc.mutation.SetRash(i)
	return cc
}

// SetNillableRash sets the "rash" field if the given value is not nil.
func (cc *ChartCreate) SetNillableRash(i *int) *ChartCreate {
	if i != nil {
		cc.SetRash(*i)
	}
	return cc
}

// SetSting sets the "sting" field.
func (cc *ChartCreate) SetSting(i int) *ChartCreate {
	cc.mutation.SetSting(i)
	return cc
}

// SetNillableSting sets the "sting" field if the given value is not nil.
func (cc *ChartCreate) SetNillableSting(i *int) *ChartCreate {
	if i != nil {
		cc.SetSting(*i)
	}
	return cc
}

// SetDyeWhen sets the "dye_when" field.
func (cc *ChartCreate) SetDyeWhen(i int) *ChartCreate {
	cc.mutation.SetDyeWhen(i)
	return cc
}

// SetNillableDyeWhen sets the "dye_when" field if the given value is not nil.
func (cc *ChartCreate) SetNillableDyeWhen(i *int) *ChartCreate {
	if i != nil {
		cc.SetDyeWhen(*i)
	}
	return cc
}

// SetDyeWhere sets the "dye_where" field.
func (cc *ChartCreate) SetDyeWhere(i int) *ChartCreate {
	cc.mutation.SetDyeWhere(i)
	return cc
}

// SetNillableDyeWhere sets the "dye_where" field if the given value is not nil.
func (cc *ChartCreate) SetNillableDyeWhere(i *int) *ChartCreate {
	if i != nil {
		cc.SetDyeWhere(*i)
	}
	return cc
}

// SetHenaWhen sets the "hena_when" field.
func (cc *ChartCreate) SetHenaWhen(i int) *ChartCreate {
	cc.mutation.SetHenaWhen(i)
	return cc
}

// SetNillableHenaWhen sets the "hena_when" field if the given value is not nil.
func (cc *ChartCreate) SetNillableHenaWhen(i *int) *ChartCreate {
	if i != nil {
		cc.SetHenaWhen(*i)
	}
	return cc
}

// SetRebondedWhen sets the "rebonded_when" field.
func (cc *ChartCreate) SetRebondedWhen(i int) *ChartCreate {
	cc.mutation.SetRebondedWhen(i)
	return cc
}

// SetNillableRebondedWhen sets the "rebonded_when" field if the given value is not nil.
func (cc *ChartCreate) SetNillableRebondedWhen(i *int) *ChartCreate {
	if i != nil {
		cc.SetRebondedWhen(*i)
	}
	return cc
}

// SetManicureWhen sets the "manicure_when" field.
func (cc *ChartCreate) SetManicureWhen(i int) *ChartCreate {
	cc.mutation.SetManicureWhen(i)
	return cc
}

// SetNillableManicureWhen sets the "manicure_when" field if the given value is not nil.
func (cc *ChartCreate) SetNillableManicureWhen(i *int) *ChartCreate {
	if i != nil {
		cc.SetManicureWhen(*i)
	}
	return cc
}

// SetPermWhen sets the "perm_when" field.
func (cc *ChartCreate) SetPermWhen(i int) *ChartCreate {
	cc.mutation.SetPermWhen(i)
	return cc
}

// SetNillablePermWhen sets the "perm_when" field if the given value is not nil.
func (cc *ChartCreate) SetNillablePermWhen(i *int) *ChartCreate {
	if i != nil {
		cc.SetPermWhen(*i)
	}
	return cc
}

// SetTreatmentWhen sets the "treatment_when" field.
func (cc *ChartCreate) SetTreatmentWhen(i int) *ChartCreate {
	cc.mutation.SetTreatmentWhen(i)
	return cc
}

// SetNillableTreatmentWhen sets the "treatment_when" field if the given value is not nil.
func (cc *ChartCreate) SetNillableTreatmentWhen(i *int) *ChartCreate {
	if i != nil {
		cc.SetTreatmentWhen(*i)
	}
	return cc
}

// SetNoticeReason sets the "notice_reason" field.
func (cc *ChartCreate) SetNoticeReason(i int) *ChartCreate {
	cc.mutation.SetNoticeReason(i)
	return cc
}

// SetNillableNoticeReason sets the "notice_reason" field if the given value is not nil.
func (cc *ChartCreate) SetNillableNoticeReason(i *int) *ChartCreate {
	if i != nil {
		cc.SetNoticeReason(*i)
	}
	return cc
}

// SetLastName sets the "last_name" field.
func (cc *ChartCreate) SetLastName(s string) *ChartCreate {
	cc.mutation.SetLastName(s)
	return cc
}

// SetFirstName sets the "first_name" field.
func (cc *ChartCreate) SetFirstName(s string) *ChartCreate {
	cc.mutation.SetFirstName(s)
	return cc
}

// SetLastNameHiragana sets the "last_name_hiragana" field.
func (cc *ChartCreate) SetLastNameHiragana(s string) *ChartCreate {
	cc.mutation.SetLastNameHiragana(s)
	return cc
}

// SetFirstNameHiragana sets the "first_name_hiragana" field.
func (cc *ChartCreate) SetFirstNameHiragana(s string) *ChartCreate {
	cc.mutation.SetFirstNameHiragana(s)
	return cc
}

// SetPostalCode sets the "postal_code" field.
func (cc *ChartCreate) SetPostalCode(s string) *ChartCreate {
	cc.mutation.SetPostalCode(s)
	return cc
}

// SetPrefectureID sets the "prefecture_id" field.
func (cc *ChartCreate) SetPrefectureID(i int) *ChartCreate {
	cc.mutation.SetPrefectureID(i)
	return cc
}

// SetNillablePrefectureID sets the "prefecture_id" field if the given value is not nil.
func (cc *ChartCreate) SetNillablePrefectureID(i *int) *ChartCreate {
	if i != nil {
		cc.SetPrefectureID(*i)
	}
	return cc
}

// SetAddress sets the "address" field.
func (cc *ChartCreate) SetAddress(s string) *ChartCreate {
	cc.mutation.SetAddress(s)
	return cc
}

// SetTel sets the "tel" field.
func (cc *ChartCreate) SetTel(s string) *ChartCreate {
	cc.mutation.SetTel(s)
	return cc
}

// SetEmail sets the "email" field.
func (cc *ChartCreate) SetEmail(s string) *ChartCreate {
	cc.mutation.SetEmail(s)
	return cc
}

// Mutation returns the ChartMutation object of the builder.
func (cc *ChartCreate) Mutation() *ChartMutation {
	return cc.mutation
}

// Save creates the Chart in the database.
func (cc *ChartCreate) Save(ctx context.Context) (*Chart, error) {
	var (
		err  error
		node *Chart
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChartMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChartCreate) SaveX(ctx context.Context) *Chart {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChartCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChartCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ChartCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := chart.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		v := chart.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	if _, ok := cc.mutation.Patch(); !ok {
		v := chart.DefaultPatch
		cc.mutation.SetPatch(v)
	}
	if _, ok := cc.mutation.Generation(); !ok {
		v := chart.DefaultGeneration
		cc.mutation.SetGeneration(v)
	}
	if _, ok := cc.mutation.Gender(); !ok {
		v := chart.DefaultGender
		cc.mutation.SetGender(v)
	}
	if _, ok := cc.mutation.Allergy(); !ok {
		v := chart.DefaultAllergy
		cc.mutation.SetAllergy(v)
	}
	if _, ok := cc.mutation.Rash(); !ok {
		v := chart.DefaultRash
		cc.mutation.SetRash(v)
	}
	if _, ok := cc.mutation.Sting(); !ok {
		v := chart.DefaultSting
		cc.mutation.SetSting(v)
	}
	if _, ok := cc.mutation.DyeWhen(); !ok {
		v := chart.DefaultDyeWhen
		cc.mutation.SetDyeWhen(v)
	}
	if _, ok := cc.mutation.DyeWhere(); !ok {
		v := chart.DefaultDyeWhere
		cc.mutation.SetDyeWhere(v)
	}
	if _, ok := cc.mutation.HenaWhen(); !ok {
		v := chart.DefaultHenaWhen
		cc.mutation.SetHenaWhen(v)
	}
	if _, ok := cc.mutation.RebondedWhen(); !ok {
		v := chart.DefaultRebondedWhen
		cc.mutation.SetRebondedWhen(v)
	}
	if _, ok := cc.mutation.ManicureWhen(); !ok {
		v := chart.DefaultManicureWhen
		cc.mutation.SetManicureWhen(v)
	}
	if _, ok := cc.mutation.PermWhen(); !ok {
		v := chart.DefaultPermWhen
		cc.mutation.SetPermWhen(v)
	}
	if _, ok := cc.mutation.TreatmentWhen(); !ok {
		v := chart.DefaultTreatmentWhen
		cc.mutation.SetTreatmentWhen(v)
	}
	if _, ok := cc.mutation.NoticeReason(); !ok {
		v := chart.DefaultNoticeReason
		cc.mutation.SetNoticeReason(v)
	}
	if _, ok := cc.mutation.PrefectureID(); !ok {
		v := chart.DefaultPrefectureID
		cc.mutation.SetPrefectureID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChartCreate) check() error {
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "update_time"`)}
	}
	if _, ok := cc.mutation.Patch(); !ok {
		return &ValidationError{Name: "patch", err: errors.New(`ent: missing required field "patch"`)}
	}
	if _, ok := cc.mutation.Generation(); !ok {
		return &ValidationError{Name: "generation", err: errors.New(`ent: missing required field "generation"`)}
	}
	if _, ok := cc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "gender"`)}
	}
	if _, ok := cc.mutation.Allergy(); !ok {
		return &ValidationError{Name: "allergy", err: errors.New(`ent: missing required field "allergy"`)}
	}
	if _, ok := cc.mutation.Rash(); !ok {
		return &ValidationError{Name: "rash", err: errors.New(`ent: missing required field "rash"`)}
	}
	if _, ok := cc.mutation.Sting(); !ok {
		return &ValidationError{Name: "sting", err: errors.New(`ent: missing required field "sting"`)}
	}
	if _, ok := cc.mutation.DyeWhen(); !ok {
		return &ValidationError{Name: "dye_when", err: errors.New(`ent: missing required field "dye_when"`)}
	}
	if _, ok := cc.mutation.DyeWhere(); !ok {
		return &ValidationError{Name: "dye_where", err: errors.New(`ent: missing required field "dye_where"`)}
	}
	if _, ok := cc.mutation.HenaWhen(); !ok {
		return &ValidationError{Name: "hena_when", err: errors.New(`ent: missing required field "hena_when"`)}
	}
	if _, ok := cc.mutation.RebondedWhen(); !ok {
		return &ValidationError{Name: "rebonded_when", err: errors.New(`ent: missing required field "rebonded_when"`)}
	}
	if _, ok := cc.mutation.ManicureWhen(); !ok {
		return &ValidationError{Name: "manicure_when", err: errors.New(`ent: missing required field "manicure_when"`)}
	}
	if _, ok := cc.mutation.PermWhen(); !ok {
		return &ValidationError{Name: "perm_when", err: errors.New(`ent: missing required field "perm_when"`)}
	}
	if _, ok := cc.mutation.TreatmentWhen(); !ok {
		return &ValidationError{Name: "treatment_when", err: errors.New(`ent: missing required field "treatment_when"`)}
	}
	if _, ok := cc.mutation.NoticeReason(); !ok {
		return &ValidationError{Name: "notice_reason", err: errors.New(`ent: missing required field "notice_reason"`)}
	}
	if _, ok := cc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "last_name"`)}
	}
	if v, ok := cc.mutation.LastName(); ok {
		if err := chart.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "last_name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "first_name"`)}
	}
	if v, ok := cc.mutation.FirstName(); ok {
		if err := chart.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "first_name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.LastNameHiragana(); !ok {
		return &ValidationError{Name: "last_name_hiragana", err: errors.New(`ent: missing required field "last_name_hiragana"`)}
	}
	if _, ok := cc.mutation.FirstNameHiragana(); !ok {
		return &ValidationError{Name: "first_name_hiragana", err: errors.New(`ent: missing required field "first_name_hiragana"`)}
	}
	if _, ok := cc.mutation.PostalCode(); !ok {
		return &ValidationError{Name: "postal_code", err: errors.New(`ent: missing required field "postal_code"`)}
	}
	if _, ok := cc.mutation.PrefectureID(); !ok {
		return &ValidationError{Name: "prefecture_id", err: errors.New(`ent: missing required field "prefecture_id"`)}
	}
	if _, ok := cc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "address"`)}
	}
	if _, ok := cc.mutation.Tel(); !ok {
		return &ValidationError{Name: "tel", err: errors.New(`ent: missing required field "tel"`)}
	}
	if _, ok := cc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "email"`)}
	}
	return nil
}

func (cc *ChartCreate) sqlSave(ctx context.Context) (*Chart, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *ChartCreate) createSpec() (*Chart, *sqlgraph.CreateSpec) {
	var (
		_node = &Chart{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: chart.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chart.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chart.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chart.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.Patch(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: chart.FieldPatch,
		})
		_node.Patch = value
	}
	if value, ok := cc.mutation.Generation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldGeneration,
		})
		_node.Generation = value
	}
	if value, ok := cc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := cc.mutation.Allergy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldAllergy,
		})
		_node.Allergy = value
	}
	if value, ok := cc.mutation.Rash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldRash,
		})
		_node.Rash = value
	}
	if value, ok := cc.mutation.Sting(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldSting,
		})
		_node.Sting = value
	}
	if value, ok := cc.mutation.DyeWhen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldDyeWhen,
		})
		_node.DyeWhen = value
	}
	if value, ok := cc.mutation.DyeWhere(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldDyeWhere,
		})
		_node.DyeWhere = value
	}
	if value, ok := cc.mutation.HenaWhen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldHenaWhen,
		})
		_node.HenaWhen = value
	}
	if value, ok := cc.mutation.RebondedWhen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldRebondedWhen,
		})
		_node.RebondedWhen = value
	}
	if value, ok := cc.mutation.ManicureWhen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldManicureWhen,
		})
		_node.ManicureWhen = value
	}
	if value, ok := cc.mutation.PermWhen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldPermWhen,
		})
		_node.PermWhen = value
	}
	if value, ok := cc.mutation.TreatmentWhen(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldTreatmentWhen,
		})
		_node.TreatmentWhen = value
	}
	if value, ok := cc.mutation.NoticeReason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldNoticeReason,
		})
		_node.NoticeReason = value
	}
	if value, ok := cc.mutation.LastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldLastName,
		})
		_node.LastName = value
	}
	if value, ok := cc.mutation.FirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldFirstName,
		})
		_node.FirstName = value
	}
	if value, ok := cc.mutation.LastNameHiragana(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldLastNameHiragana,
		})
		_node.LastNameHiragana = value
	}
	if value, ok := cc.mutation.FirstNameHiragana(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldFirstNameHiragana,
		})
		_node.FirstNameHiragana = value
	}
	if value, ok := cc.mutation.PostalCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldPostalCode,
		})
		_node.PostalCode = value
	}
	if value, ok := cc.mutation.PrefectureID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldPrefectureID,
		})
		_node.PrefectureID = value
	}
	if value, ok := cc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := cc.mutation.Tel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldTel,
		})
		_node.Tel = value
	}
	if value, ok := cc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldEmail,
		})
		_node.Email = value
	}
	return _node, _spec
}

// ChartCreateBulk is the builder for creating many Chart entities in bulk.
type ChartCreateBulk struct {
	config
	builders []*ChartCreate
}

// Save creates the Chart entities in the database.
func (ccb *ChartCreateBulk) Save(ctx context.Context) ([]*Chart, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Chart, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChartMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChartCreateBulk) SaveX(ctx context.Context) []*Chart {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChartCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChartCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
