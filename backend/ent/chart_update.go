// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ta-toshio/bherb/ent/chart"
	"github.com/ta-toshio/bherb/ent/predicate"
)

// ChartUpdate is the builder for updating Chart entities.
type ChartUpdate struct {
	config
	hooks    []Hook
	mutation *ChartMutation
}

// Where appends a list predicates to the ChartUpdate builder.
func (cu *ChartUpdate) Where(ps ...predicate.Chart) *ChartUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetPatch sets the "patch" field.
func (cu *ChartUpdate) SetPatch(b bool) *ChartUpdate {
	cu.mutation.SetPatch(b)
	return cu
}

// SetNillablePatch sets the "patch" field if the given value is not nil.
func (cu *ChartUpdate) SetNillablePatch(b *bool) *ChartUpdate {
	if b != nil {
		cu.SetPatch(*b)
	}
	return cu
}

// SetGeneration sets the "generation" field.
func (cu *ChartUpdate) SetGeneration(i int) *ChartUpdate {
	cu.mutation.ResetGeneration()
	cu.mutation.SetGeneration(i)
	return cu
}

// SetNillableGeneration sets the "generation" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableGeneration(i *int) *ChartUpdate {
	if i != nil {
		cu.SetGeneration(*i)
	}
	return cu
}

// AddGeneration adds i to the "generation" field.
func (cu *ChartUpdate) AddGeneration(i int) *ChartUpdate {
	cu.mutation.AddGeneration(i)
	return cu
}

// SetGender sets the "gender" field.
func (cu *ChartUpdate) SetGender(i int) *ChartUpdate {
	cu.mutation.ResetGender()
	cu.mutation.SetGender(i)
	return cu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableGender(i *int) *ChartUpdate {
	if i != nil {
		cu.SetGender(*i)
	}
	return cu
}

// AddGender adds i to the "gender" field.
func (cu *ChartUpdate) AddGender(i int) *ChartUpdate {
	cu.mutation.AddGender(i)
	return cu
}

// SetAllergy sets the "allergy" field.
func (cu *ChartUpdate) SetAllergy(i int) *ChartUpdate {
	cu.mutation.ResetAllergy()
	cu.mutation.SetAllergy(i)
	return cu
}

// SetNillableAllergy sets the "allergy" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableAllergy(i *int) *ChartUpdate {
	if i != nil {
		cu.SetAllergy(*i)
	}
	return cu
}

// AddAllergy adds i to the "allergy" field.
func (cu *ChartUpdate) AddAllergy(i int) *ChartUpdate {
	cu.mutation.AddAllergy(i)
	return cu
}

// SetRash sets the "rash" field.
func (cu *ChartUpdate) SetRash(i int) *ChartUpdate {
	cu.mutation.ResetRash()
	cu.mutation.SetRash(i)
	return cu
}

// SetNillableRash sets the "rash" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableRash(i *int) *ChartUpdate {
	if i != nil {
		cu.SetRash(*i)
	}
	return cu
}

// AddRash adds i to the "rash" field.
func (cu *ChartUpdate) AddRash(i int) *ChartUpdate {
	cu.mutation.AddRash(i)
	return cu
}

// SetSting sets the "sting" field.
func (cu *ChartUpdate) SetSting(i int) *ChartUpdate {
	cu.mutation.ResetSting()
	cu.mutation.SetSting(i)
	return cu
}

// SetNillableSting sets the "sting" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableSting(i *int) *ChartUpdate {
	if i != nil {
		cu.SetSting(*i)
	}
	return cu
}

// AddSting adds i to the "sting" field.
func (cu *ChartUpdate) AddSting(i int) *ChartUpdate {
	cu.mutation.AddSting(i)
	return cu
}

// SetDyeWhen sets the "dye_when" field.
func (cu *ChartUpdate) SetDyeWhen(i int) *ChartUpdate {
	cu.mutation.ResetDyeWhen()
	cu.mutation.SetDyeWhen(i)
	return cu
}

// SetNillableDyeWhen sets the "dye_when" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableDyeWhen(i *int) *ChartUpdate {
	if i != nil {
		cu.SetDyeWhen(*i)
	}
	return cu
}

// AddDyeWhen adds i to the "dye_when" field.
func (cu *ChartUpdate) AddDyeWhen(i int) *ChartUpdate {
	cu.mutation.AddDyeWhen(i)
	return cu
}

// SetDyeWhere sets the "dye_where" field.
func (cu *ChartUpdate) SetDyeWhere(i int) *ChartUpdate {
	cu.mutation.ResetDyeWhere()
	cu.mutation.SetDyeWhere(i)
	return cu
}

// SetNillableDyeWhere sets the "dye_where" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableDyeWhere(i *int) *ChartUpdate {
	if i != nil {
		cu.SetDyeWhere(*i)
	}
	return cu
}

// AddDyeWhere adds i to the "dye_where" field.
func (cu *ChartUpdate) AddDyeWhere(i int) *ChartUpdate {
	cu.mutation.AddDyeWhere(i)
	return cu
}

// SetHenaWhen sets the "hena_when" field.
func (cu *ChartUpdate) SetHenaWhen(i int) *ChartUpdate {
	cu.mutation.ResetHenaWhen()
	cu.mutation.SetHenaWhen(i)
	return cu
}

// SetNillableHenaWhen sets the "hena_when" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableHenaWhen(i *int) *ChartUpdate {
	if i != nil {
		cu.SetHenaWhen(*i)
	}
	return cu
}

// AddHenaWhen adds i to the "hena_when" field.
func (cu *ChartUpdate) AddHenaWhen(i int) *ChartUpdate {
	cu.mutation.AddHenaWhen(i)
	return cu
}

// SetRebondedWhen sets the "rebonded_when" field.
func (cu *ChartUpdate) SetRebondedWhen(i int) *ChartUpdate {
	cu.mutation.ResetRebondedWhen()
	cu.mutation.SetRebondedWhen(i)
	return cu
}

// SetNillableRebondedWhen sets the "rebonded_when" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableRebondedWhen(i *int) *ChartUpdate {
	if i != nil {
		cu.SetRebondedWhen(*i)
	}
	return cu
}

// AddRebondedWhen adds i to the "rebonded_when" field.
func (cu *ChartUpdate) AddRebondedWhen(i int) *ChartUpdate {
	cu.mutation.AddRebondedWhen(i)
	return cu
}

// SetManicureWhen sets the "manicure_when" field.
func (cu *ChartUpdate) SetManicureWhen(i int) *ChartUpdate {
	cu.mutation.ResetManicureWhen()
	cu.mutation.SetManicureWhen(i)
	return cu
}

// SetNillableManicureWhen sets the "manicure_when" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableManicureWhen(i *int) *ChartUpdate {
	if i != nil {
		cu.SetManicureWhen(*i)
	}
	return cu
}

// AddManicureWhen adds i to the "manicure_when" field.
func (cu *ChartUpdate) AddManicureWhen(i int) *ChartUpdate {
	cu.mutation.AddManicureWhen(i)
	return cu
}

// SetPermWhen sets the "perm_when" field.
func (cu *ChartUpdate) SetPermWhen(i int) *ChartUpdate {
	cu.mutation.ResetPermWhen()
	cu.mutation.SetPermWhen(i)
	return cu
}

// SetNillablePermWhen sets the "perm_when" field if the given value is not nil.
func (cu *ChartUpdate) SetNillablePermWhen(i *int) *ChartUpdate {
	if i != nil {
		cu.SetPermWhen(*i)
	}
	return cu
}

// AddPermWhen adds i to the "perm_when" field.
func (cu *ChartUpdate) AddPermWhen(i int) *ChartUpdate {
	cu.mutation.AddPermWhen(i)
	return cu
}

// SetTreatmentWhen sets the "treatment_when" field.
func (cu *ChartUpdate) SetTreatmentWhen(i int) *ChartUpdate {
	cu.mutation.ResetTreatmentWhen()
	cu.mutation.SetTreatmentWhen(i)
	return cu
}

// SetNillableTreatmentWhen sets the "treatment_when" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableTreatmentWhen(i *int) *ChartUpdate {
	if i != nil {
		cu.SetTreatmentWhen(*i)
	}
	return cu
}

// AddTreatmentWhen adds i to the "treatment_when" field.
func (cu *ChartUpdate) AddTreatmentWhen(i int) *ChartUpdate {
	cu.mutation.AddTreatmentWhen(i)
	return cu
}

// SetNoticeReason sets the "notice_reason" field.
func (cu *ChartUpdate) SetNoticeReason(i int) *ChartUpdate {
	cu.mutation.ResetNoticeReason()
	cu.mutation.SetNoticeReason(i)
	return cu
}

// SetNillableNoticeReason sets the "notice_reason" field if the given value is not nil.
func (cu *ChartUpdate) SetNillableNoticeReason(i *int) *ChartUpdate {
	if i != nil {
		cu.SetNoticeReason(*i)
	}
	return cu
}

// AddNoticeReason adds i to the "notice_reason" field.
func (cu *ChartUpdate) AddNoticeReason(i int) *ChartUpdate {
	cu.mutation.AddNoticeReason(i)
	return cu
}

// SetLastName sets the "last_name" field.
func (cu *ChartUpdate) SetLastName(s string) *ChartUpdate {
	cu.mutation.SetLastName(s)
	return cu
}

// SetFirstName sets the "first_name" field.
func (cu *ChartUpdate) SetFirstName(s string) *ChartUpdate {
	cu.mutation.SetFirstName(s)
	return cu
}

// SetLastNameHiragana sets the "last_name_hiragana" field.
func (cu *ChartUpdate) SetLastNameHiragana(s string) *ChartUpdate {
	cu.mutation.SetLastNameHiragana(s)
	return cu
}

// SetFirstNameHiragana sets the "first_name_hiragana" field.
func (cu *ChartUpdate) SetFirstNameHiragana(s string) *ChartUpdate {
	cu.mutation.SetFirstNameHiragana(s)
	return cu
}

// SetPostalCode sets the "postal_code" field.
func (cu *ChartUpdate) SetPostalCode(s string) *ChartUpdate {
	cu.mutation.SetPostalCode(s)
	return cu
}

// SetPrefectureID sets the "prefecture_id" field.
func (cu *ChartUpdate) SetPrefectureID(i int) *ChartUpdate {
	cu.mutation.ResetPrefectureID()
	cu.mutation.SetPrefectureID(i)
	return cu
}

// SetNillablePrefectureID sets the "prefecture_id" field if the given value is not nil.
func (cu *ChartUpdate) SetNillablePrefectureID(i *int) *ChartUpdate {
	if i != nil {
		cu.SetPrefectureID(*i)
	}
	return cu
}

// AddPrefectureID adds i to the "prefecture_id" field.
func (cu *ChartUpdate) AddPrefectureID(i int) *ChartUpdate {
	cu.mutation.AddPrefectureID(i)
	return cu
}

// SetAddress sets the "address" field.
func (cu *ChartUpdate) SetAddress(s string) *ChartUpdate {
	cu.mutation.SetAddress(s)
	return cu
}

// SetTel sets the "tel" field.
func (cu *ChartUpdate) SetTel(s string) *ChartUpdate {
	cu.mutation.SetTel(s)
	return cu
}

// SetEmail sets the "email" field.
func (cu *ChartUpdate) SetEmail(s string) *ChartUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// Mutation returns the ChartMutation object of the builder.
func (cu *ChartUpdate) Mutation() *ChartMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChartUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChartMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChartUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChartUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChartUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChartUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := chart.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ChartUpdate) check() error {
	if v, ok := cu.mutation.LastName(); ok {
		if err := chart.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf("ent: validator failed for field \"last_name\": %w", err)}
		}
	}
	if v, ok := cu.mutation.FirstName(); ok {
		if err := chart.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf("ent: validator failed for field \"first_name\": %w", err)}
		}
	}
	return nil
}

func (cu *ChartUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chart.Table,
			Columns: chart.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chart.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chart.FieldUpdateTime,
		})
	}
	if value, ok := cu.mutation.Patch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: chart.FieldPatch,
		})
	}
	if value, ok := cu.mutation.Generation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldGeneration,
		})
	}
	if value, ok := cu.mutation.AddedGeneration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldGeneration,
		})
	}
	if value, ok := cu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldGender,
		})
	}
	if value, ok := cu.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldGender,
		})
	}
	if value, ok := cu.mutation.Allergy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldAllergy,
		})
	}
	if value, ok := cu.mutation.AddedAllergy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldAllergy,
		})
	}
	if value, ok := cu.mutation.Rash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldRash,
		})
	}
	if value, ok := cu.mutation.AddedRash(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldRash,
		})
	}
	if value, ok := cu.mutation.Sting(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldSting,
		})
	}
	if value, ok := cu.mutation.AddedSting(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldSting,
		})
	}
	if value, ok := cu.mutation.DyeWhen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldDyeWhen,
		})
	}
	if value, ok := cu.mutation.AddedDyeWhen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldDyeWhen,
		})
	}
	if value, ok := cu.mutation.DyeWhere(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldDyeWhere,
		})
	}
	if value, ok := cu.mutation.AddedDyeWhere(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldDyeWhere,
		})
	}
	if value, ok := cu.mutation.HenaWhen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldHenaWhen,
		})
	}
	if value, ok := cu.mutation.AddedHenaWhen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldHenaWhen,
		})
	}
	if value, ok := cu.mutation.RebondedWhen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldRebondedWhen,
		})
	}
	if value, ok := cu.mutation.AddedRebondedWhen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldRebondedWhen,
		})
	}
	if value, ok := cu.mutation.ManicureWhen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldManicureWhen,
		})
	}
	if value, ok := cu.mutation.AddedManicureWhen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldManicureWhen,
		})
	}
	if value, ok := cu.mutation.PermWhen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldPermWhen,
		})
	}
	if value, ok := cu.mutation.AddedPermWhen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldPermWhen,
		})
	}
	if value, ok := cu.mutation.TreatmentWhen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldTreatmentWhen,
		})
	}
	if value, ok := cu.mutation.AddedTreatmentWhen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldTreatmentWhen,
		})
	}
	if value, ok := cu.mutation.NoticeReason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldNoticeReason,
		})
	}
	if value, ok := cu.mutation.AddedNoticeReason(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldNoticeReason,
		})
	}
	if value, ok := cu.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldLastName,
		})
	}
	if value, ok := cu.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldFirstName,
		})
	}
	if value, ok := cu.mutation.LastNameHiragana(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldLastNameHiragana,
		})
	}
	if value, ok := cu.mutation.FirstNameHiragana(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldFirstNameHiragana,
		})
	}
	if value, ok := cu.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldPostalCode,
		})
	}
	if value, ok := cu.mutation.PrefectureID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldPrefectureID,
		})
	}
	if value, ok := cu.mutation.AddedPrefectureID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldPrefectureID,
		})
	}
	if value, ok := cu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldAddress,
		})
	}
	if value, ok := cu.mutation.Tel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldTel,
		})
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldEmail,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ChartUpdateOne is the builder for updating a single Chart entity.
type ChartUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChartMutation
}

// SetPatch sets the "patch" field.
func (cuo *ChartUpdateOne) SetPatch(b bool) *ChartUpdateOne {
	cuo.mutation.SetPatch(b)
	return cuo
}

// SetNillablePatch sets the "patch" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillablePatch(b *bool) *ChartUpdateOne {
	if b != nil {
		cuo.SetPatch(*b)
	}
	return cuo
}

// SetGeneration sets the "generation" field.
func (cuo *ChartUpdateOne) SetGeneration(i int) *ChartUpdateOne {
	cuo.mutation.ResetGeneration()
	cuo.mutation.SetGeneration(i)
	return cuo
}

// SetNillableGeneration sets the "generation" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableGeneration(i *int) *ChartUpdateOne {
	if i != nil {
		cuo.SetGeneration(*i)
	}
	return cuo
}

// AddGeneration adds i to the "generation" field.
func (cuo *ChartUpdateOne) AddGeneration(i int) *ChartUpdateOne {
	cuo.mutation.AddGeneration(i)
	return cuo
}

// SetGender sets the "gender" field.
func (cuo *ChartUpdateOne) SetGender(i int) *ChartUpdateOne {
	cuo.mutation.ResetGender()
	cuo.mutation.SetGender(i)
	return cuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableGender(i *int) *ChartUpdateOne {
	if i != nil {
		cuo.SetGender(*i)
	}
	return cuo
}

// AddGender adds i to the "gender" field.
func (cuo *ChartUpdateOne) AddGender(i int) *ChartUpdateOne {
	cuo.mutation.AddGender(i)
	return cuo
}

// SetAllergy sets the "allergy" field.
func (cuo *ChartUpdateOne) SetAllergy(i int) *ChartUpdateOne {
	cuo.mutation.ResetAllergy()
	cuo.mutation.SetAllergy(i)
	return cuo
}

// SetNillableAllergy sets the "allergy" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableAllergy(i *int) *ChartUpdateOne {
	if i != nil {
		cuo.SetAllergy(*i)
	}
	return cuo
}

// AddAllergy adds i to the "allergy" field.
func (cuo *ChartUpdateOne) AddAllergy(i int) *ChartUpdateOne {
	cuo.mutation.AddAllergy(i)
	return cuo
}

// SetRash sets the "rash" field.
func (cuo *ChartUpdateOne) SetRash(i int) *ChartUpdateOne {
	cuo.mutation.ResetRash()
	cuo.mutation.SetRash(i)
	return cuo
}

// SetNillableRash sets the "rash" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableRash(i *int) *ChartUpdateOne {
	if i != nil {
		cuo.SetRash(*i)
	}
	return cuo
}

// AddRash adds i to the "rash" field.
func (cuo *ChartUpdateOne) AddRash(i int) *ChartUpdateOne {
	cuo.mutation.AddRash(i)
	return cuo
}

// SetSting sets the "sting" field.
func (cuo *ChartUpdateOne) SetSting(i int) *ChartUpdateOne {
	cuo.mutation.ResetSting()
	cuo.mutation.SetSting(i)
	return cuo
}

// SetNillableSting sets the "sting" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableSting(i *int) *ChartUpdateOne {
	if i != nil {
		cuo.SetSting(*i)
	}
	return cuo
}

// AddSting adds i to the "sting" field.
func (cuo *ChartUpdateOne) AddSting(i int) *ChartUpdateOne {
	cuo.mutation.AddSting(i)
	return cuo
}

// SetDyeWhen sets the "dye_when" field.
func (cuo *ChartUpdateOne) SetDyeWhen(i int) *ChartUpdateOne {
	cuo.mutation.ResetDyeWhen()
	cuo.mutation.SetDyeWhen(i)
	return cuo
}

// SetNillableDyeWhen sets the "dye_when" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableDyeWhen(i *int) *ChartUpdateOne {
	if i != nil {
		cuo.SetDyeWhen(*i)
	}
	return cuo
}

// AddDyeWhen adds i to the "dye_when" field.
func (cuo *ChartUpdateOne) AddDyeWhen(i int) *ChartUpdateOne {
	cuo.mutation.AddDyeWhen(i)
	return cuo
}

// SetDyeWhere sets the "dye_where" field.
func (cuo *ChartUpdateOne) SetDyeWhere(i int) *ChartUpdateOne {
	cuo.mutation.ResetDyeWhere()
	cuo.mutation.SetDyeWhere(i)
	return cuo
}

// SetNillableDyeWhere sets the "dye_where" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableDyeWhere(i *int) *ChartUpdateOne {
	if i != nil {
		cuo.SetDyeWhere(*i)
	}
	return cuo
}

// AddDyeWhere adds i to the "dye_where" field.
func (cuo *ChartUpdateOne) AddDyeWhere(i int) *ChartUpdateOne {
	cuo.mutation.AddDyeWhere(i)
	return cuo
}

// SetHenaWhen sets the "hena_when" field.
func (cuo *ChartUpdateOne) SetHenaWhen(i int) *ChartUpdateOne {
	cuo.mutation.ResetHenaWhen()
	cuo.mutation.SetHenaWhen(i)
	return cuo
}

// SetNillableHenaWhen sets the "hena_when" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableHenaWhen(i *int) *ChartUpdateOne {
	if i != nil {
		cuo.SetHenaWhen(*i)
	}
	return cuo
}

// AddHenaWhen adds i to the "hena_when" field.
func (cuo *ChartUpdateOne) AddHenaWhen(i int) *ChartUpdateOne {
	cuo.mutation.AddHenaWhen(i)
	return cuo
}

// SetRebondedWhen sets the "rebonded_when" field.
func (cuo *ChartUpdateOne) SetRebondedWhen(i int) *ChartUpdateOne {
	cuo.mutation.ResetRebondedWhen()
	cuo.mutation.SetRebondedWhen(i)
	return cuo
}

// SetNillableRebondedWhen sets the "rebonded_when" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableRebondedWhen(i *int) *ChartUpdateOne {
	if i != nil {
		cuo.SetRebondedWhen(*i)
	}
	return cuo
}

// AddRebondedWhen adds i to the "rebonded_when" field.
func (cuo *ChartUpdateOne) AddRebondedWhen(i int) *ChartUpdateOne {
	cuo.mutation.AddRebondedWhen(i)
	return cuo
}

// SetManicureWhen sets the "manicure_when" field.
func (cuo *ChartUpdateOne) SetManicureWhen(i int) *ChartUpdateOne {
	cuo.mutation.ResetManicureWhen()
	cuo.mutation.SetManicureWhen(i)
	return cuo
}

// SetNillableManicureWhen sets the "manicure_when" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableManicureWhen(i *int) *ChartUpdateOne {
	if i != nil {
		cuo.SetManicureWhen(*i)
	}
	return cuo
}

// AddManicureWhen adds i to the "manicure_when" field.
func (cuo *ChartUpdateOne) AddManicureWhen(i int) *ChartUpdateOne {
	cuo.mutation.AddManicureWhen(i)
	return cuo
}

// SetPermWhen sets the "perm_when" field.
func (cuo *ChartUpdateOne) SetPermWhen(i int) *ChartUpdateOne {
	cuo.mutation.ResetPermWhen()
	cuo.mutation.SetPermWhen(i)
	return cuo
}

// SetNillablePermWhen sets the "perm_when" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillablePermWhen(i *int) *ChartUpdateOne {
	if i != nil {
		cuo.SetPermWhen(*i)
	}
	return cuo
}

// AddPermWhen adds i to the "perm_when" field.
func (cuo *ChartUpdateOne) AddPermWhen(i int) *ChartUpdateOne {
	cuo.mutation.AddPermWhen(i)
	return cuo
}

// SetTreatmentWhen sets the "treatment_when" field.
func (cuo *ChartUpdateOne) SetTreatmentWhen(i int) *ChartUpdateOne {
	cuo.mutation.ResetTreatmentWhen()
	cuo.mutation.SetTreatmentWhen(i)
	return cuo
}

// SetNillableTreatmentWhen sets the "treatment_when" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableTreatmentWhen(i *int) *ChartUpdateOne {
	if i != nil {
		cuo.SetTreatmentWhen(*i)
	}
	return cuo
}

// AddTreatmentWhen adds i to the "treatment_when" field.
func (cuo *ChartUpdateOne) AddTreatmentWhen(i int) *ChartUpdateOne {
	cuo.mutation.AddTreatmentWhen(i)
	return cuo
}

// SetNoticeReason sets the "notice_reason" field.
func (cuo *ChartUpdateOne) SetNoticeReason(i int) *ChartUpdateOne {
	cuo.mutation.ResetNoticeReason()
	cuo.mutation.SetNoticeReason(i)
	return cuo
}

// SetNillableNoticeReason sets the "notice_reason" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillableNoticeReason(i *int) *ChartUpdateOne {
	if i != nil {
		cuo.SetNoticeReason(*i)
	}
	return cuo
}

// AddNoticeReason adds i to the "notice_reason" field.
func (cuo *ChartUpdateOne) AddNoticeReason(i int) *ChartUpdateOne {
	cuo.mutation.AddNoticeReason(i)
	return cuo
}

// SetLastName sets the "last_name" field.
func (cuo *ChartUpdateOne) SetLastName(s string) *ChartUpdateOne {
	cuo.mutation.SetLastName(s)
	return cuo
}

// SetFirstName sets the "first_name" field.
func (cuo *ChartUpdateOne) SetFirstName(s string) *ChartUpdateOne {
	cuo.mutation.SetFirstName(s)
	return cuo
}

// SetLastNameHiragana sets the "last_name_hiragana" field.
func (cuo *ChartUpdateOne) SetLastNameHiragana(s string) *ChartUpdateOne {
	cuo.mutation.SetLastNameHiragana(s)
	return cuo
}

// SetFirstNameHiragana sets the "first_name_hiragana" field.
func (cuo *ChartUpdateOne) SetFirstNameHiragana(s string) *ChartUpdateOne {
	cuo.mutation.SetFirstNameHiragana(s)
	return cuo
}

// SetPostalCode sets the "postal_code" field.
func (cuo *ChartUpdateOne) SetPostalCode(s string) *ChartUpdateOne {
	cuo.mutation.SetPostalCode(s)
	return cuo
}

// SetPrefectureID sets the "prefecture_id" field.
func (cuo *ChartUpdateOne) SetPrefectureID(i int) *ChartUpdateOne {
	cuo.mutation.ResetPrefectureID()
	cuo.mutation.SetPrefectureID(i)
	return cuo
}

// SetNillablePrefectureID sets the "prefecture_id" field if the given value is not nil.
func (cuo *ChartUpdateOne) SetNillablePrefectureID(i *int) *ChartUpdateOne {
	if i != nil {
		cuo.SetPrefectureID(*i)
	}
	return cuo
}

// AddPrefectureID adds i to the "prefecture_id" field.
func (cuo *ChartUpdateOne) AddPrefectureID(i int) *ChartUpdateOne {
	cuo.mutation.AddPrefectureID(i)
	return cuo
}

// SetAddress sets the "address" field.
func (cuo *ChartUpdateOne) SetAddress(s string) *ChartUpdateOne {
	cuo.mutation.SetAddress(s)
	return cuo
}

// SetTel sets the "tel" field.
func (cuo *ChartUpdateOne) SetTel(s string) *ChartUpdateOne {
	cuo.mutation.SetTel(s)
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *ChartUpdateOne) SetEmail(s string) *ChartUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// Mutation returns the ChartMutation object of the builder.
func (cuo *ChartUpdateOne) Mutation() *ChartMutation {
	return cuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChartUpdateOne) Select(field string, fields ...string) *ChartUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Chart entity.
func (cuo *ChartUpdateOne) Save(ctx context.Context) (*Chart, error) {
	var (
		err  error
		node *Chart
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChartMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChartUpdateOne) SaveX(ctx context.Context) *Chart {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChartUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChartUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChartUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := chart.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ChartUpdateOne) check() error {
	if v, ok := cuo.mutation.LastName(); ok {
		if err := chart.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf("ent: validator failed for field \"last_name\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.FirstName(); ok {
		if err := chart.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf("ent: validator failed for field \"first_name\": %w", err)}
		}
	}
	return nil
}

func (cuo *ChartUpdateOne) sqlSave(ctx context.Context) (_node *Chart, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chart.Table,
			Columns: chart.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chart.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Chart.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chart.FieldID)
		for _, f := range fields {
			if !chart.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chart.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chart.FieldUpdateTime,
		})
	}
	if value, ok := cuo.mutation.Patch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: chart.FieldPatch,
		})
	}
	if value, ok := cuo.mutation.Generation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldGeneration,
		})
	}
	if value, ok := cuo.mutation.AddedGeneration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldGeneration,
		})
	}
	if value, ok := cuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldGender,
		})
	}
	if value, ok := cuo.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldGender,
		})
	}
	if value, ok := cuo.mutation.Allergy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldAllergy,
		})
	}
	if value, ok := cuo.mutation.AddedAllergy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldAllergy,
		})
	}
	if value, ok := cuo.mutation.Rash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldRash,
		})
	}
	if value, ok := cuo.mutation.AddedRash(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldRash,
		})
	}
	if value, ok := cuo.mutation.Sting(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldSting,
		})
	}
	if value, ok := cuo.mutation.AddedSting(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldSting,
		})
	}
	if value, ok := cuo.mutation.DyeWhen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldDyeWhen,
		})
	}
	if value, ok := cuo.mutation.AddedDyeWhen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldDyeWhen,
		})
	}
	if value, ok := cuo.mutation.DyeWhere(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldDyeWhere,
		})
	}
	if value, ok := cuo.mutation.AddedDyeWhere(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldDyeWhere,
		})
	}
	if value, ok := cuo.mutation.HenaWhen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldHenaWhen,
		})
	}
	if value, ok := cuo.mutation.AddedHenaWhen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldHenaWhen,
		})
	}
	if value, ok := cuo.mutation.RebondedWhen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldRebondedWhen,
		})
	}
	if value, ok := cuo.mutation.AddedRebondedWhen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldRebondedWhen,
		})
	}
	if value, ok := cuo.mutation.ManicureWhen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldManicureWhen,
		})
	}
	if value, ok := cuo.mutation.AddedManicureWhen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldManicureWhen,
		})
	}
	if value, ok := cuo.mutation.PermWhen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldPermWhen,
		})
	}
	if value, ok := cuo.mutation.AddedPermWhen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldPermWhen,
		})
	}
	if value, ok := cuo.mutation.TreatmentWhen(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldTreatmentWhen,
		})
	}
	if value, ok := cuo.mutation.AddedTreatmentWhen(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldTreatmentWhen,
		})
	}
	if value, ok := cuo.mutation.NoticeReason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldNoticeReason,
		})
	}
	if value, ok := cuo.mutation.AddedNoticeReason(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldNoticeReason,
		})
	}
	if value, ok := cuo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldLastName,
		})
	}
	if value, ok := cuo.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldFirstName,
		})
	}
	if value, ok := cuo.mutation.LastNameHiragana(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldLastNameHiragana,
		})
	}
	if value, ok := cuo.mutation.FirstNameHiragana(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldFirstNameHiragana,
		})
	}
	if value, ok := cuo.mutation.PostalCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldPostalCode,
		})
	}
	if value, ok := cuo.mutation.PrefectureID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldPrefectureID,
		})
	}
	if value, ok := cuo.mutation.AddedPrefectureID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: chart.FieldPrefectureID,
		})
	}
	if value, ok := cuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldAddress,
		})
	}
	if value, ok := cuo.mutation.Tel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldTel,
		})
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chart.FieldEmail,
		})
	}
	_node = &Chart{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
