# GraphQLのscalar型であるTimeをGoの構造体time.Timeにマッピングする
scalar Time

interface Node {
  id: ID!
}

# 後でEntのenum(Go側の型)にマップするenum型を定義する
# https://graphql.org/learn/schema/#enumeration-types
enum Status {
  IN_PROGRESS
  COMPLETED
}

# 生成されたEntモデルにマッピングするオブジェクト型を定義する
# https://graphql.org/learn/schema/#object-types-and-fields
type Todo implements Node {
  id: ID!
  createdAt: Time
  status: Status!
  priority: Int!
  text: String!
  parent: Todo
  children: [Todo!]
}

# 後述するMutation用のinput型を定義する
# https://graphql.org/learn/schema/#input-types
input TodoInput {
  status: Status! = IN_PROGRESS
  priority: Int
  text: String!
  parent: ID
}

# 新しいtodoを作成するためのMutationを定義する
# https://graphql.org/learn/queries/#mutations
type Mutation {
  createTodo(todo: TodoInput!): Todo!
}

# Define a query for getting all todos.
type Query {
  todos: [Todo!]
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
}